trigger:
- main

parameters:
- name: environment
  type: string
  default: 'test'
  values:
  - test
  - prod

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Plan
  displayName: 'Terraform Plan'
  jobs:
  - job: TerraformPlan
    displayName: 'Terraform Plan Job'
    steps:
    - checkout: self
    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'terraform_credentials'
      displayName: 'Download Terraform credentials'
    - script: |
        # Set environment variables for Terraform
        $env:ARM_CLIENT_ID = "$(ARM_CLIENT_ID)"
        $env:ARM_CLIENT_SECRET = "$(ARM_CLIENT_SECRET)"
        $env:ARM_SUBSCRIPTION_ID = "$(ARM_SUBSCRIPTION_ID)"
        $env:ARM_TENANT_ID = "$(ARM_TENANT_ID)"

        # Initialize Terraform
        terraform init

        # Plan Terraform deployment
        terraform plan -var-file=$(parameters.environment).tfvars -out=tfplan
      displayName: 'Run Terraform Plan'
    artifacts: 
      files: tfplan
      name: tfplan
      type: filePath

- stage: Validate
  displayName: 'Manual Validation'
  dependsOn: Plan
  jobs:
  - job: ManualValidation
    displayName: 'Manual Validation Job'
    steps:
    - task: ManualValidation@0
      inputs:
        instructions: 'Please validate the Terraform plan before applying.'

- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Validate
  jobs:
  - job: TerraformApply
    displayName: 'Terraform Apply Job'
    steps:
    - checkout: self
    - download: current
      artifact: tfplan
    - task: DownloadSecureFile@1
      inputs:
        secureFile: 'terraform_credentials'
      displayName: 'Download Terraform credentials'
    - script: |
        # Set environment variables for Terraform
        $env:ARM_CLIENT_ID = "$(ARM_CLIENT_ID)"
        $env:ARM_CLIENT_SECRET = "$(ARM_CLIENT_SECRET)"
        $env:ARM_SUBSCRIPTION_ID = "$(ARM_SUBSCRIPTION_ID)"
        $env:ARM_TENANT_ID = "$(ARM_TENANT_ID)"

        # Apply Terraform plan
        terraform apply -input=false tfplan
      displayName: 'Run Terraform Apply'
